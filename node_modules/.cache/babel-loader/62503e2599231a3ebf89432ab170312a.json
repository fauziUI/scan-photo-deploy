{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\1414\\\\Downloads\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1414\\\\Downloads\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\1414\\\\Downloads\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\1414\\\\Downloads\\\\example\\\\src\\\\Scanner.js\";\n\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { Button, Spin } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport Cropper from \"react-perspective-cropper\";\nimport { saveAs } from \"file-saver\";\nimport \"./App.css\";\n\nvar Scanner = function Scanner(data, setData, img) {\n  console.log(img, \"ini img\");\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      cropState = _useState2[0],\n      setCropState = _useState2[1]; // const [img, setImg] = useState();\n\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      res = _useState4[0],\n      setRes = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      url = _useState6[0],\n      setURL = _useState6[1];\n\n  var cropperRef = useRef();\n  var onDragStop = useCallback(function (s) {\n    return setCropState(s);\n  }, []);\n  var onChange = useCallback(function (s) {\n    return setCropState(s);\n  }, []);\n\n  var doSomething = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"CropState\", cropState);\n              _context.prev = 1;\n              _context.next = 4;\n              return cropperRef.current.done({\n                preview: true,\n                filterCvParams: {\n                  thMeanCorrection: 13,\n                  thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n                }\n              });\n\n            case 4:\n              _res = _context.sent;\n              setRes(_res);\n              console.log(\"Cropped and filtered image\", _res);\n              console.log(URL.createObjectURL(_res), \"ini URL cropped nya\");\n              setURL(URL.createObjectURL(_res));\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(\"error\", _context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function doSomething() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const onImgSelection = async (e) => {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     // it can also be a http or base64 string for example\n  //     setImg(e.target.files[0]);\n  //   }\n  // };\n\n\n  var downloadImage = function downloadImage() {\n    saveAs(res, \"scan-photo.png\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"root-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, cropState && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: doSomething,\n    icon: /*#__PURE__*/React.createElement(CheckOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 49\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      cropperRef.current.backToCrop();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(Cropper, {\n    openCvPath: \"./opencv/opencv.js\",\n    ref: cropperRef,\n    image: img,\n    onChange: onChange,\n    onDragStop: onDragStop,\n    maxWidth: window.innerWidth - 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), (cropState === null || cropState === void 0 ? void 0 : cropState.loading) && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 32\n    }\n  }), \"HALO\"));\n};\n\nexport default Scanner;","map":{"version":3,"sources":["C:/Users/1414/Downloads/example/src/Scanner.js"],"names":["React","useCallback","useRef","useState","Button","Spin","CheckOutlined","Cropper","saveAs","Scanner","data","setData","img","console","log","cropState","setCropState","res","setRes","url","setURL","cropperRef","onDragStop","s","onChange","doSomething","current","done","preview","filterCvParams","thMeanCorrection","thMode","window","cv","ADAPTIVE_THRESH_GAUSSIAN_C","URL","createObjectURL","downloadImage","backToCrop","innerWidth","loading"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\r\nimport { Button, Spin } from \"antd\";\r\nimport { CheckOutlined } from \"@ant-design/icons\";\r\nimport Cropper from \"react-perspective-cropper\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst Scanner = (data, setData, img) => {\r\n  console.log(img, \"ini img\");\r\n  const [cropState, setCropState] = useState();\r\n  // const [img, setImg] = useState();\r\n  const [res, setRes] = useState();\r\n  const [url, setURL] = useState();\r\n  const cropperRef = useRef();\r\n\r\n  const onDragStop = useCallback((s) => setCropState(s), []);\r\n  const onChange = useCallback((s) => setCropState(s), []);\r\n\r\n  const doSomething = async () => {\r\n    console.log(\"CropState\", cropState);\r\n    try {\r\n      const res = await cropperRef.current.done({\r\n        preview: true,\r\n        filterCvParams: {\r\n          thMeanCorrection: 13,\r\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C,\r\n        },\r\n      });\r\n      setRes(res);\r\n      console.log(\"Cropped and filtered image\", res);\r\n      console.log(URL.createObjectURL(res), \"ini URL cropped nya\");\r\n      setURL(URL.createObjectURL(res));\r\n    } catch (e) {\r\n      console.log(\"error\", e);\r\n    }\r\n  };\r\n\r\n  // const onImgSelection = async (e) => {\r\n  //   if (e.target.files && e.target.files.length > 0) {\r\n  //     // it can also be a http or base64 string for example\r\n  //     setImg(e.target.files[0]);\r\n  //   }\r\n  // };\r\n\r\n  const downloadImage = () => {\r\n    saveAs(res, \"scan-photo.png\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"root-container\">\r\n      <div className=\"content-container\">\r\n        {cropState && (\r\n          <div className=\"buttons-container\">\r\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\r\n              Done\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                cropperRef.current.backToCrop();\r\n              }}\r\n            >\r\n              Back\r\n            </Button>\r\n            {/* <Button\r\n              onClick={() => {\r\n                setImg(undefined);\r\n                setCropState();\r\n              }}\r\n            >\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        )}\r\n        <Cropper\r\n          openCvPath=\"./opencv/opencv.js\"\r\n          ref={cropperRef}\r\n          image={img}\r\n          onChange={onChange}\r\n          onDragStop={onDragStop}\r\n          maxWidth={window.innerWidth - 10}\r\n        />\r\n        {cropState?.loading && <Spin />}\r\n        HALO\r\n        {/* {!img && (\r\n          <label className=\"custom-file-upload\">\r\n            <input\r\n              className=\"inputFile\"\r\n              type=\"file\"\r\n              name=\"file\"\r\n              onChange={onImgSelection}\r\n              accept=\"image/png, image/gif, image/jpeg\"\r\n              capture=\"environment\"\r\n            />\r\n            Take Picture\r\n          </label>\r\n        )} */}\r\n        {/* {res && (\r\n          <>\r\n            <div className=\"buttons-container\">\r\n              <Button onClick={downloadImage} icon={<CheckOutlined />}>\r\n                Download\r\n              </Button>\r\n            </div>\r\n            <img src={url} alt=\"React Logo\" />\r\n          </>\r\n        )} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n"]},"metadata":{},"sourceType":"module"}