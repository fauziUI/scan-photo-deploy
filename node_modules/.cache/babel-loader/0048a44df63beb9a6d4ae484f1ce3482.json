{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\1414\\\\Downloads\\\\react-perspective-cropper-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\1414\\\\Downloads\\\\react-perspective-cropper-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\1414\\\\Downloads\\\\react-perspective-cropper-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\1414\\\\Downloads\\\\react-perspective-cropper-master\\\\example\\\\src\\\\App.js\";\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport { Button, Spin, Upload } from 'antd';\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons';\nimport Cropper from 'react-perspective-cropper';\nimport './App.css';\nvar Dragger = Upload.Dragger;\n\nvar App = function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      cropState = _useState2[0],\n      setCropState = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      img = _useState4[0],\n      setImg = _useState4[1];\n\n  var cropperRef = useRef();\n  var onDragStop = useCallback(function (s) {\n    return setCropState(s);\n  }, []);\n  var onChange = useCallback(function (s) {\n    return setCropState(s);\n  }, []);\n\n  var doSomething = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('CropState', cropState);\n              _context.prev = 1;\n              _context.next = 4;\n              return cropperRef.current.done({\n                preview: true,\n                filterCvParams: {\n                  thMeanCorrection: 13,\n                  thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n                }\n              });\n\n            case 4:\n              res = _context.sent;\n              console.log('Cropped and filtered image', res);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log('error', _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function doSomething() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onImgSelection = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (e.fileList && e.fileList.length > 0) {\n                // it can also be a http or base64 string for example\n                setImg(e.fileList[0].originFileObj);\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onImgSelection(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"root-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, cropState && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: doSomething,\n    icon: /*#__PURE__*/React.createElement(CheckOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 49\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      cropperRef.current.backToCrop();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      setImg(undefined);\n      setCropState();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(Cropper, {\n    openCvPath: \"./opencv/opencv.js\",\n    ref: cropperRef,\n    image: img,\n    onChange: onChange,\n    onDragStop: onDragStop,\n    maxWidth: window.innerWidth - 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), (cropState === null || cropState === void 0 ? void 0 : cropState.loading) && /*#__PURE__*/React.createElement(Spin, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 32\n    }\n  }), !img &&\n  /*#__PURE__*/\n  // <Dragger {...draggerProps}>\n  //   <p>\n  //     <PlusOutlined />\n  //   </p>\n  //   <p>Upload</p>\n  // </Dragger>\n  React.createElement(\"label\", {\n    className: \"custom-file-upload\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"inputFile\",\n    type: \"file\",\n    name: \"photo-ktp\",\n    onChange: onImgSelection,\n    accept: \"image/png, image/gif, image/jpeg\",\n    capture: \"environment\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), \"Take Picture\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/1414/Downloads/react-perspective-cropper-master/example/src/App.js"],"names":["React","useCallback","useRef","useState","Button","Spin","Upload","CheckOutlined","PlusOutlined","Cropper","Dragger","App","cropState","setCropState","img","setImg","cropperRef","onDragStop","s","onChange","doSomething","console","log","current","done","preview","filterCvParams","thMeanCorrection","thMode","window","cv","ADAPTIVE_THRESH_GAUSSIAN_C","res","onImgSelection","e","fileList","length","originFileObj","draggerProps","name","multiple","backToCrop","undefined","innerWidth","loading"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\nimport { Button, Spin, Upload } from 'antd'\nimport { CheckOutlined, PlusOutlined } from '@ant-design/icons'\nimport Cropper from 'react-perspective-cropper'\n\nimport './App.css'\n\nconst { Dragger } = Upload\n\nconst App = () => {\n  const [cropState, setCropState] = useState()\n  const [img, setImg] = useState()\n  const cropperRef = useRef()\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  const doSomething = async () => {\n    console.log('CropState', cropState)\n    try {\n      const res = await cropperRef.current.done({\n        preview: true,\n        filterCvParams: {\n          thMeanCorrection: 13,\n          thMode: window.cv.ADAPTIVE_THRESH_GAUSSIAN_C\n        }\n      })\n      console.log('Cropped and filtered image', res)\n    } catch (e) {\n      console.log('error', e)\n    }\n  }\n\n  const onImgSelection = async (e) => {\n    if (e.fileList && e.fileList.length > 0) {\n      // it can also be a http or base64 string for example\n      setImg(e.fileList[0].originFileObj)\n    }\n  }\n\n  const draggerProps = {\n    name: 'file',\n    multiple: false,\n    onChange: onImgSelection\n  }\n\n  return (\n    <div className='root-container'>\n      <div className='content-container'>\n        {cropState && (\n          <div className='buttons-container'>\n            <Button onClick={doSomething} icon={<CheckOutlined />}>\n              Done\n            </Button>\n            <Button\n              onClick={() => {\n                cropperRef.current.backToCrop()\n              }}\n            >\n              Back\n            </Button>\n            <Button\n              onClick={() => {\n                setImg(undefined)\n                setCropState()\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n        <Cropper\n          openCvPath='./opencv/opencv.js'\n          ref={cropperRef}\n          image={img}\n          onChange={onChange}\n          onDragStop={onDragStop}\n          maxWidth={window.innerWidth - 10}\n        />\n        {cropState?.loading && <Spin />}\n        {!img && (\n          // <Dragger {...draggerProps}>\n          //   <p>\n          //     <PlusOutlined />\n          //   </p>\n          //   <p>Upload</p>\n          // </Dragger>\n          <label className='custom-file-upload'>\n            <input\n              className='inputFile'\n              type='file'\n              name='photo-ktp'\n              onChange={onImgSelection}\n              accept='image/png, image/gif, image/jpeg'\n              capture='environment'\n            />\n            Take Picture\n          </label>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}